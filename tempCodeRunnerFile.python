from tensorflow import keras
(x_train, y_train), (x_test, y_test) = keras.datasets.mnist.load_data()

import numpy as np
import cv2
from sklearn.datasets import fetch_openml
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.metrics import accuracy_score

# Load the MNIST dataset
mnist = fetch_openml("mnist_784")

# Preprocess the data using OpenCV
#X = mnist["data"]
#y = mnist["target"].astype(np.uint8)
#X = X.reshape((X.shape[0], 28, 28))
#X = [cv2.threshold(img, 127, 255, cv2.THRESH_BINARY)[1] for img in X]
#X = [cv2.resize(img, (16, 16), interpolation=cv2.INTER_AREA) for img in X]
#X = np.array(X).reshape((len(X), -1))

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=0)

# Create the pipeline
pipeline = Pipeline([
    ('scaler', StandardScaler()),
    ('pca', PCA(n_components=0.95)),
    ('clf', SVC(kernel='rbf', C=10, gamma='scale', random_state=0))
])

# Train the pipeline
pipeline.fit(X_train, y_train)

# Evaluate the pipeline
y_pred = pipeline.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)

